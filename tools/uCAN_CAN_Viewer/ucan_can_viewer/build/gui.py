
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from glob import glob
from pathlib import Path
from datetime import datetime
from re import X
# import can
import time
# from can.interfaces import cfuc
from tkinter import Tk, Canvas, Toplevel, Entry, Text, Button, PhotoImage, messagebox, Checkbutton, Label
from tkinter import ttk
import tkinter as tk
import threading
import os
# from serial import SerialException

from gs_usb.gs_usb import GsUsb
from gs_usb.gs_usb_frame import GsUsbFrame
from gs_usb.constants import (
    CAN_EFF_FLAG,
    CAN_ERR_FLAG,
    CAN_RTR_FLAG,
    GS_CAN_MODE_LISTEN_ONLY,
    GS_CAN_MODE_LOOP_BACK,
    GS_CAN_MODE_NORMAL,
)


can_connected = False
counter = 0
bus = 0
conf_file_name = "can.conf"
thd = None
dev = None


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

timestamps_map = {}
def AddCANFrame(msg_to_send, tree, dir):
    can_flags_str = ""
    # if msg_to_send.is_fd:
        # can_flags_str += "FD "
    # if msg_to_send.bitrate_switch:
    #     can_flags_str += "BRS "
    if msg_to_send.is_error_frame:
        can_flags_str += "ERR "
    if msg_to_send.is_remote_frame:
        can_flags_str += "RMT "
    if msg_to_send.is_extended_id:
        can_flags_str += "EX "

    hex_string = ''.join(format(x, ' 02x')
                         for x in msg_to_send.data[0:msg_to_send.can_dlc])

    global delta_view
    global timestamps_map

    if delta_view == False:
        tree.insert('', 0, text="1", values=(dir+datetime.now().strftime("%H:%M:%S.%m"),
                hex(msg_to_send.can_id), hex(msg_to_send.can_dlc), str(hex_string), can_flags_str))
    else:
        try:
            delta_t = datetime.now() - timestamps_map[msg_to_send.can_id]            
            timestamps_map[msg_to_send.can_id] = datetime.now() 
            tree.item(msg_to_send.can_id, text="1", values=(dir+"{:02d}.{:03d}".format(delta_t.seconds,round(delta_t.microseconds/1000)),
                hex(msg_to_send.can_id), hex(msg_to_send.can_dlc), str(hex_string), can_flags_str))
        except:
            timestamps_map[msg_to_send.can_id] = datetime.now() 
            tree.insert('', 0, iid=msg_to_send.can_id, text="1", values=(dir+'0.0',
                hex(msg_to_send.can_id), hex(msg_to_send.can_dlc), str(hex_string), can_flags_str))
        
def CANrx_thread():
    global dev
    global can_connected
    print('can rx thread started')
    while 1:
        if (can_connected == True):
            try:
                msgs_recv = GsUsbFrame()
                if dev.read(msgs_recv, 1):
                    print("RX  {}".format(msgs_recv))
                    AddCANFrame(msgs_recv, tree, "Rx: ")
            except Exception:
                print("rx exception")
                can_connected = False
                break
        else:
            break
        time.sleep(0.001)  # one second
    print('can rx thread exit')


def relative_to_assets(path: str) -> Path:
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath("./assets")

    # return os.path.join(base_path, path)
    return ASSETS_PATH / Path(path)


def connect_callback():
    print("connect click")
    global dev
    global can_connected
    global thd

    if (can_connected == False):
        devs = GsUsb.scan()
        if len(devs) == 0:
            print("Can not find gs_usb device")
            return
        dev = devs[1]

        if not dev.set_bitrate(1000000):
            print("Can not set bitrate for gs_usb")
            return

        # Start device
        dev.start(GS_CAN_MODE_NORMAL)

        print("can interface created")
        can_connected = True
        button_connect.configure(image=button_connect_img_diss)
        thd = threading.Thread(target=CANrx_thread)
        thd.start()
    else:
        button_connect.configure(image=button_connect_img)
        can_connected = False
        thd.join()
        dev.stop()

def CANtx(msg):
    global dev
    global can_connected
    if dev.send(msg):
        print("TX  {}".format(msg))
# -------------------------------------------- GUI -----------------------------------------------


window = Tk()
window.title("uCANViewer2 v1.0")


def on_reflash():
    global bus
    global can_connected
    if messagebox.askokcancel("Enter Boot Mode",
                              "This will enter cfuc embedded device into bootloader mode, on how to flash new software visit  https://ucandevices.github.io/cfuc.html"):
        print("reflash")
        bus.go_to_bootloader()


def on_closing():
    global can_connected
    global bus
    global thd

    can_connected = False
    if (thd != None):
        thd.join()
        bus.shutdown()
    window.destroy()


window.geometry("680x375")
window.configure(bg="#FFFFFF")


canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=375,
    width=635,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

button_connect_img = PhotoImage(
    file=relative_to_assets("button_connect.png"))
button_connect_img_diss = PhotoImage(
    file=relative_to_assets("button_connect_diss.png"))
button_connect = Button(
    image=button_connect_img,
    borderwidth=0,
    highlightthickness=0,
    command=connect_callback,
    relief="flat"
)
button_connect.place(
    x=7.0,
    y=10.0,
    width=87.0,
    height=24.0
)

canvas.create_rectangle(
    84.0,
    45.0,
    85.0,
    330.0,
    fill="#FFFFFF",
    outline="")


canvas.create_text(
    108.0,
    3.0,
    anchor="nw",
    text="config file",
    fill="#000000",
    font=("Inter", 12 * -1)
)

# switch view
 
delta_view = False
def switch_view():
    global delta_view 
    delta_view = not delta_view
    print("delta view is:" + str(delta_view))
    tree.delete(*tree.get_children())

switch_view_img = PhotoImage(
    file=relative_to_assets("switch_view.png"))
switch_view_btn = Button(
    image=switch_view_img,
    borderwidth=0,
    highlightthickness=0,
    command=switch_view,
    relief="flat"
)
switch_view_btn.place(
    x=250.0,
    y=10.0,
    width=100.0,
    height=19.0
)

# clear
button_image_2 = PhotoImage(
    file=relative_to_assets("button_clear.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: tree.delete(*tree.get_children()),
    relief="flat"
)
button_2.place(
    x=180.0,
    y=10.0,
    width=68.0,
    height=19.0
)

# reflash , enter bootlader
button_reflash_img = PhotoImage(
    file=relative_to_assets("reflash.png"))
button_reflash = Button(
    image=button_reflash_img,
    borderwidth=0,
    highlightthickness=0,
    command=on_reflash,
    relief="flat"
)
button_reflash.place(
    x=480.0,
    y=10.0,
    width=150.0,
    height=19.0
)

# ------------------- can opts ----------
uCAN_EXID = tk.IntVar()
uCAN_BRS = tk.IntVar()
uCAN_FD = tk.IntVar()

# c_exid c_brs c_err (var1.get())

c_exid = Checkbutton(window, text='ExID',
                     variable=uCAN_EXID, onvalue=1, offvalue=0)
c_exid.place(x=440, y=300)

c_fd = Checkbutton(window, text='FD', variable=uCAN_FD, onvalue=1, offvalue=0)
c_fd.place(x=440, y=320)

c_brs = Checkbutton(window, text='BRS', variable=uCAN_BRS,
                    onvalue=1, offvalue=0)
c_brs.place(x=440, y=340)


# ------------------ can send button ----------------------
def send_can_frame():
    if (can_connected == True):
        hexadecimal_data_string = can_frame_text.get("1.0", "end")
        hexadecimal_id_string = can_id.get()
        try:
            can_data_byte_array = bytes(bytearray.fromhex(hexadecimal_data_string))
            data = b"\x12\x34\x56\x78\x9A\xBC\xDE\xF0" 
            can_id_value = int(hexadecimal_id_string, 16)
            
            msg_to_send = GsUsbFrame(can_id=can_id_value, data=can_data_byte_array)
            
            AddCANFrame(msg_to_send, tree, "Tx: ")
            CANtx(msg_to_send)
            
        except ValueError:
            len_can_lbl.config(text="data or id is in wrong format")
    else:
        len_can_lbl.config(text="first click connect button")


# -------------- edit cfg can_cfg -----------

# function to open a new window
# on a button click
global cfg_text_widget
global newWindow

can_save_cfg_button_img = PhotoImage(
    file=relative_to_assets("button_save.png"))

def openNewWindow():

    # Toplevel object which will
    # be treated as a new window
    global newWindow
    newWindow = Toplevel(window)

    # sets the title of the
    # Toplevel widget
    newWindow.title("Config file edit")

    # sets the geometry of toplevel
    newWindow.geometry("200x200")

    # A Label widget to show in toplevel
    global cfg_text_widget
    cfg_text_widget = Text(newWindow)

    cfg_save_button = Button(newWindow,
                             borderwidth=0,
                             image=can_save_cfg_button_img,
                             highlightthickness=0,
                             command=save_cfg,
                             relief="flat",

                             )
    cfg_save_button.pack(side=tk.BOTTOM)
    cfg_text_widget.pack()
   
    print("Open cfg file in")
    print(relative_to_assets(conf_file_name))
    file = open(relative_to_assets(conf_file_name), mode='r')
    all_of_it = file.read()
    file.close()

    cfg_text_widget.insert(tk.INSERT, all_of_it)


def save_cfg():
    global cfg_text_widget
    global newWindow
    input = cfg_text_widget.get("1.0", tk.END)
    file = open(relative_to_assets(conf_file_name), mode='w')
    file.write(input)
    file.close()
    newWindow.destroy()
    newWindow.update()
    print("Cfg SAVED")



can_edit_cfg_button_img = PhotoImage(
    file=relative_to_assets("edit_cfg.png"))

can_edit_cfg_button = Button(
    image=can_edit_cfg_button_img,
    borderwidth=0,
    highlightthickness=0,
    command=openNewWindow,
    relief="flat"
)
can_edit_cfg_button.place(
    x=400.0,
    y=10.0,
    width=68.0,
    height=19.0
)


can_send_button_img = PhotoImage(
    file=relative_to_assets("button_send.png"))
can_send_button = Button(
    image=can_send_button_img,
    borderwidth=0,
    highlightthickness=0,
    command=send_can_frame,
    relief="flat"
)
can_send_button.place(
    x=495.0,
    y=300.0,
    width=68.0,
    height=60.0
)

canvas.create_text(
    15.0,
    280,
    anchor="nw",
    text="CAN ID",
    fill="#000000",
    font=("Inter", 12 * -1)
)

can_id_img = PhotoImage(
    file=relative_to_assets("can_id.png"))
can_id = Entry(
    bd=0,
    bg="#D9D9D9",
    highlightthickness=0,
)
can_id.place(
    x=15.0,
    y=300.0,
    width=67.0,
    height=17.0
)
can_id.insert(0, "0x00")

# can frame send text widget
canvas.create_text(
    85.0,
    280,
    anchor="nw",
    text="CAN DATA",
    fill="#000000",
    font=("Inter", 12 * -1)
)

len_can_lbl = Label(text="len:")
len_can_lbl.place(
    x=185.0,
    y=280
)


def update_can_lenght(event):
    hexadecimal_string = can_frame_text.get("1.0", "end")
    try:
        byte_array = bytearray.fromhex(hexadecimal_string)
        len_can_lbl.config(text="len: " + str(len(byte_array)))
    except ValueError:
        len_can_lbl.config(text="data is in wrong format")


can_frame_text = Text(window, bd=0, bg="#D9D9D9")
can_frame_text.place(
    x=85.0,
    y=300.0,
    width=340,
    height=60
)

can_frame_text.bind('<KeyRelease>', update_can_lenght)


# ------------------------ conf entry + tree

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    141.5,
    27.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#D9D9D9",
    highlightthickness=0,
)
entry_1.place(
    x=108.0,
    y=18.0,
    width=67.0,
    height=17.0
)
entry_1.insert(0, conf_file_name)

# Add a Treeview widget
style = ttk.Style(window)
style.theme_use("clam")
style.configure('Treeview.Heading', background='#3086AB', foreground='#D9D9D9')
# style.configure('Treeview', background='#D9D9D9', foreground='black')

tree = ttk.Treeview(window, column=("c1", "c2", "c3", "c4", "c5"),
                    show='headings', height=10,)

tree.column("# 1",  anchor="nw", width=85)
tree.heading("# 1", text="Timestamp")
tree.column("# 2",  anchor="nw", width=60)
tree.heading("# 2", text="ID")
tree.column("# 3",  anchor="nw", width=35)
tree.heading("# 3", text="DLC")
tree.column("# 4",  anchor="nw", width=410)
tree.heading("# 4", text="Data")
tree.column("# 5",  anchor="nw", width=60)
tree.heading("# 5", text="Flags")

# Insert the data in Treeview widget


tree.place(x=10.0, y=50)
# tree.pack()

window.resizable(True, True)
window.protocol("WM_DELETE_WINDOW", on_closing)
window.mainloop()
